{
  "name": "React-themeit",
  "tagline": "An easy way to theme your components using css modules and js css objects thanks to aphrodite. Also works with asynchronously loaded styles!",
  "body": "# themeit - react & css modules theming made easy\r\n\r\nthemeit makes it easy to create and use different themes\r\nfor your react components while using CSS Modules or JS style objects.\r\n\r\nIt's built with code splitting in mind and allows you to\r\nload only the themes you need at a time by utilizing code splitting.\r\n\r\nYou can also pass in a JS style object for themes which will be processed\r\nautomatically with [aphrodite](https://github.com/Khan/aphrodite).\r\n\r\n## Installation\r\n\r\n```Shell\r\nnpm i -S react-themeit\r\n```\r\n\r\n## Usage\r\n\r\n**Component Declaration**\r\n\r\n```Javascript\r\nimport { themeit } from 'react-themeit';\r\n\r\nconst themeOptions = {\r\n  base: cb => require(['./base.less'], cb),\r\n  themes: {\r\n    blue: cb => require(['./themes/blue.less'], cb),\r\n    big: cb => require(['./themes/big.less'], cb),\r\n    italic: {\r\n      label: {\r\n        fontStyle: 'italic'\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst MyComponent = props => (\r\n  <div className={props.styles.container}>\r\n    <label className={props.styles.label}>react-themeit</label>\r\n  </div>\r\n);\r\n\r\nexport default themeit(themeOptions)(MyComponent);\r\n```\r\n\r\n**Component Usage**\r\n\r\n```Javascript\r\nimport MyComponent from './MyComponent';\r\n\r\nexport default () => (\r\n  <MyComponent\r\n    theme=\"blue big italic\"\r\n    styles={{ label: { textDecoration: 'underline' } }}\r\n    addFiles={cb => require(['./additionalStyles.less'], cb) }\r\n  />\r\n);\r\n```\r\n\r\n### Options\r\n\r\n`themeit({`\r\n- `themes` *(object)*: an object in which the *keys* represent *theme names* and the values can either be a function which should return a localized class map like { container: 'container_38h2f02h' } or a js style object like { container: { backgroundColor: '#000' } }\r\n- [`default`] *(string)*: name of a default theme\r\n- [`base`] *(func)*: base styles which should always be applied\r\n\r\n`})`\r\n\r\nA component which is wrapped with *themeit* accepts these additional props:\r\n- `addFiles` *(func)*: a function to pass additional theme classes to the component\r\n- `styles` *(object)*: additional js css styles to be passed to the component (will be processed with *aphrodite*)\r\n\r\nThe target component will receive the combined style classes in a property called `styles`.\r\nIt will also receive a prop named `themeit` which contains all options you passed to *themeit* and a function `setTheme(name)` which you can invoke to change the current theme of the component.\r\n\r\n### FAQ\r\n\r\n#### Does it work with hot reloading / HMR ?\r\nYes. Configuring async css files for HMR require a bit of more code though. To make it easier and shorter, *react-themeit* exports a `hot(...)` function which can be used.\r\n\r\nCheck this snippet for example:\r\n\r\n```Javascript\r\nimport { themeit, hot } from 'react-themeit';\r\n\r\nconst themeOptions = {\r\n  base: cb => require(['./base.less'], s => {\r\n    hot(s, cb, c => module.hot.accept('./base.less', c))\r\n  }),\r\n  themes: {\r\n    blue: cb => require(['./themes/blue.less'], cb)\r\n  }\r\n};\r\n```\r\n\r\nIn this case, only the `base` .less will be hot reloadable.\r\nThe `hot` function automatically checks whether module.hot is\r\ndefined and only enables HMR if it is.\r\n\r\n### Roadmap\r\n- implement automatic generation of react-storybook stories\r\n\r\n### About\r\n![](http://ovosplay.com/img/ovosplay.png)\r\n\r\nInitially built for use in the [ovos play game designer](http://ovosplay.com/)\r\nto allow designers and developers to easily work together.\r\n\r\nContributions are very welcome!\r\n\r\n### License\r\n[MIT License](LICENSE)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}